// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: book.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BookingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingRequestMultiError,
// or nil if none found.
func (m *BookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuoteId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "QuoteId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "QuoteId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuoteId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "QuoteId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "LastName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "LastName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "LastName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumberExtension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumberExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumberExtension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumberExtension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "PhoneNumberExtension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmailAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "EmailAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "EmailAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmailAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "EmailAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumberDisplay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumberDisplay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PhoneNumberDisplay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumberDisplay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "PhoneNumberDisplay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrefferedContactMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PrefferedContactMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingRequestValidationError{
					field:  "PrefferedContactMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrefferedContactMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingRequestValidationError{
				field:  "PrefferedContactMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingRequestMultiError(errors)
	}
	return nil
}

// BookingRequestMultiError is an error wrapping multiple validation errors
// returned by BookingRequest.ValidateAll() if the designated constraints
// aren't met.
type BookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingRequestMultiError) AllErrors() []error { return m }

// BookingRequestValidationError is the validation error returned by
// BookingRequest.Validate if the designated constraints aren't met.
type BookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingRequestValidationError) ErrorName() string { return "BookingRequestValidationError" }

// Error satisfies the builtin error interface
func (e BookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingRequestValidationError{}

// Validate checks the field values on BookingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookingResponseMultiError, or nil if none found.
func (m *BookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "BookingId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "BookingId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "BookingId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBolUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "BolUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "BolUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBolUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "BolUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoiceUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "InvoiceUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "InvoiceUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoiceUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "InvoiceUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInvoiceDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "InvoiceDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "InvoiceDueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoiceDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "InvoiceDueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickUpStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "PickUpStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "PickUpStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "PickUpStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickUpEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "PickUpEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "PickUpEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "PickUpEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuoteBooked()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "QuoteBooked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingResponseValidationError{
					field:  "QuoteBooked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuoteBooked()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingResponseValidationError{
				field:  "QuoteBooked",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingResponseMultiError(errors)
	}
	return nil
}

// BookingResponseMultiError is an error wrapping multiple validation errors
// returned by BookingResponse.ValidateAll() if the designated constraints
// aren't met.
type BookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingResponseMultiError) AllErrors() []error { return m }

// BookingResponseValidationError is the validation error returned by
// BookingResponse.Validate if the designated constraints aren't met.
type BookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingResponseValidationError) ErrorName() string { return "BookingResponseValidationError" }

// Error satisfies the builtin error interface
func (e BookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingResponseValidationError{}

// Validate checks the field values on ListOfBooking with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOfBooking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOfBooking with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOfBookingMultiError, or
// nil if none found.
func (m *ListOfBooking) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOfBooking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookingHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOfBookingValidationError{
						field:  fmt.Sprintf("BookingHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOfBookingValidationError{
						field:  fmt.Sprintf("BookingHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfBookingValidationError{
					field:  fmt.Sprintf("BookingHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOfBookingMultiError(errors)
	}
	return nil
}

// ListOfBookingMultiError is an error wrapping multiple validation errors
// returned by ListOfBooking.ValidateAll() if the designated constraints
// aren't met.
type ListOfBookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOfBookingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOfBookingMultiError) AllErrors() []error { return m }

// ListOfBookingValidationError is the validation error returned by
// ListOfBooking.Validate if the designated constraints aren't met.
type ListOfBookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfBookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfBookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfBookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfBookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfBookingValidationError) ErrorName() string { return "ListOfBookingValidationError" }

// Error satisfies the builtin error interface
func (e ListOfBookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfBookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfBookingValidationError{}

// Validate checks the field values on FetchBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchBookingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchBookingsRequestMultiError, or nil if none found.
func (m *FetchBookingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchBookingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookingId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchBookingsRequestValidationError{
						field:  fmt.Sprintf("BookingId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchBookingsRequestValidationError{
						field:  fmt.Sprintf("BookingId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchBookingsRequestValidationError{
					field:  fmt.Sprintf("BookingId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOrgId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "OrgId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "OrgId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrgId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchBookingsRequestValidationError{
				field:  "OrgId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "StartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "StartFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchBookingsRequestValidationError{
				field:  "StartFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "EndOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchBookingsRequestValidationError{
					field:  "EndOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchBookingsRequestValidationError{
				field:  "EndOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchBookingsRequestMultiError(errors)
	}
	return nil
}

// FetchBookingsRequestMultiError is an error wrapping multiple validation
// errors returned by FetchBookingsRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchBookingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchBookingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchBookingsRequestMultiError) AllErrors() []error { return m }

// FetchBookingsRequestValidationError is the validation error returned by
// FetchBookingsRequest.Validate if the designated constraints aren't met.
type FetchBookingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchBookingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchBookingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchBookingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchBookingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchBookingsRequestValidationError) ErrorName() string {
	return "FetchBookingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchBookingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchBookingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchBookingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchBookingsRequestValidationError{}
